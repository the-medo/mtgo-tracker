generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  bio                  String?   @db.Text
  age                  Int?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  tags                 Tag[]
  mtgoUsername         String?
  mtgoVerificationCode String?
  mtgoVerified         Boolean   @default(false)
  isPublic             Boolean   @default(false)
  isAdmin              Boolean   @default(false)

  UserInfo   UserQOL[]
  Matches    Match[]   @relation("User")
  OppMatches Match[]   @relation("OppUser")
  Events     Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ====================================== FETCHBOOK ============================================

// === ENUMS
enum TagType {
  MATCH
  GAME
  EVENT
  DECK
}

enum EventType {
  LEAGUE
  FRIENDLY_LEAGUE
  CHALLENGE32
  CHALLENGE64
  PRELIMINARY
  TWO_PLAYER_QUEUE
  OPEN_PLAY
  RL_SMALL
  RL_MEDIUM
  RL_BIG
  OTHER
}

enum MatchType {
  BO1
  BO3
  BO5
  OTHER
}

enum DeckServiceType {
  MOXFIELD
  GOLDFISH
  MELEEGG
}

// === TABLES
model Format {
  id                    Int            @id @default(autoincrement())
  name                  String
  latestFormatVersionId Int?
  formatVersion         FormatVersion? @relation(fields: [latestFormatVersionId], references: [id], onDelete: SetNull)

  Decks         Deck[]
  DeckArchetype DeckArchetype[]
  Events        Event[]
}

model FormatVersion {
  id            Int       @id @default(autoincrement())
  latestRelease String?
  latestBans    String?
  description   String?
  validFrom     DateTime?

  Decks   Deck[]
  Formats Format[]
  Events  Event[]
}

model ArchetypeGroup {
  id   Int    @id @default(autoincrement())
  name String

  DeckArchetype DeckArchetype[]
}

model DeckArchetype {
  id               Int            @id @default(autoincrement())
  name             String
  formatId         Int
  archetypeGroupId Int
  archetypeGroup   ArchetypeGroup @relation(fields: [archetypeGroupId], references: [id], onDelete: Cascade)
  format           Format         @relation(fields: [formatId], references: [id], onDelete: Cascade)

  Decks      Deck[]
  OppMatches Match[]
}

model Deck {
  id            Int              @id @default(autoincrement())
  userId        String
  name          String?
  link          String?
  service       DeckServiceType?
  serviceDeckId String?
  lastPlayedAt  DateTime?
  createdAt     DateTime?        @default(now())

  formatId        Int
  formatVersionId Int
  deckArchetypeId Int

  format        Format        @relation(fields: [formatId], references: [id], onDelete: Cascade)
  formatVersion FormatVersion @relation(fields: [formatVersionId], references: [id], onDelete: Cascade)
  deckArchetype DeckArchetype @relation(fields: [deckArchetypeId], references: [id], onDelete: Cascade)

  Events   Event[]
  Matches  Match[]
  DeckTags DeckTag[]
}

model Event {
  id              Int       @id @default(autoincrement())
  userId          String
  mtgoId          String
  type            EventType
  matchType       MatchType @default(BO3)
  rounds          Int
  name            String
  formatId        Int
  formatVersionId Int
  deckId          Int?
  entry           Int?
  winnings        Int?
  date            DateTime?
  notes           String?   @db.Text

  Matches   Match[]
  EventTags EventTag[]

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck          Deck?         @relation(fields: [deckId], references: [id], onDelete: SetNull)
  format        Format        @relation(fields: [formatId], references: [id], onDelete: Cascade)
  formatVersion FormatVersion @relation(fields: [formatVersionId], references: [id], onDelete: Cascade)
}

model Match {
  id               Int       @id @default(autoincrement())
  round            Int?
  mtgoId           String?
  userId           String
  oppName          String
  oppUserId        String?
  oppMatchId       Int?
  oppArchetypeId   Int?
  oppArchetypeNote String?
  matchType        MatchType
  eventId          Int?
  deckId           Int
  isWin            Boolean?
  startTime        DateTime
  public           Boolean
  notes            String?   @db.Text

  OppMatch  Match[]    @relation("OppMatch")
  Games     Game[]
  MatchTags MatchTag[]

  user         User           @relation(fields: [userId], references: [id], name: "User", onDelete: Cascade)
  event        Event?         @relation(fields: [eventId], references: [id], onDelete: SetNull)
  deck         Deck           @relation(fields: [deckId], references: [id], onDelete: Cascade)
  oppUser      User?          @relation(fields: [oppUserId], references: [id], name: "OppUser", onDelete: SetNull)
  oppMatch     Match?         @relation(fields: [oppMatchId], references: [id], name: "OppMatch", onDelete: SetNull)
  oppArchetype DeckArchetype? @relation(fields: [oppArchetypeId], references: [id], onDelete: SetNull)
}

model Game {
  id              Int      @id @default(autoincrement())
  gameNumber      Int
  matchId         Int
  mtgoGameId      String?
  isWin           Boolean?
  isOnPlay        Boolean?
  turns           Int?
  startingHand    Int?
  oppStartingHand Int?
  notes           String?  @db.Text

  GameTags GameTag[]

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([gameNumber, matchId])
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String
  userId String
  type   TagType

  MatchTags MatchTag[]
  GameTags  GameTag[]
  EventTags EventTag[]
  DeckTags  DeckTag[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MatchTag {
  tagId   Int
  matchId Int

  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@id([tagId, matchId])
}

model GameTag {
  tagId  Int
  gameId Int

  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([tagId, gameId])
}

model EventTag {
  tagId   Int
  eventId Int

  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([tagId, eventId])
}

model DeckTag {
  tagId  Int
  deckId Int

  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  deck Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@id([tagId, deckId])
}

model UserQOL {
  userId String @id

  lastUsedIds Json?
  filters     Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
